
## Math in the World: Pre-computer computing

In today's world, software is the means by which expert knowledge and capability is communicated and applied. Before modern computers were available, the expertise was committed to print in the form of tables. @fig-pierce-pnorm-table shows one function table from *A Short Table of Integrals* published in 1899. [The tabulated function is called the "error function," amusingly written $\\text{Erf}(x)$. It is essentially the same as the gaussian, the relationship being $\\text{Erf}(x) + 1 = 2\\pnorm(x)$ for $0\\leq x < \\infty$.]{.aside} Incredibly, such tables were a standard feature of statistics textbooks up through 2010. 


```{r echo=FALSE}
#| label: fig-pierce-pnorm-table
#| fig-cap: "Before the computer software era, some functions could only be presented using printed tables. This table supports calculations with a gaussian-like function for inputs from 0 to 1."
knitr::include_graphics("www/pierce-pnorm-table.png")
```


In addition to software being more compact and easier to use than printed tables, the interface to numerical integrals can be presented in the same format as any other mathematical function. That has enabled us to include $\pnorm()$ among the pattern book functions. 

In @sec-pattern-book-functions we introduced a small set of pattern-book functions. Each of the functions is indeed a pattern that could be written down once and for all in tabular form. Generating such tables originally required the work of human "computers" who undertook extensive and elaborate arithmetical calculations by hand. What's considered the first programmable engine, a mechanical device designed by Charles Babbage (1791-1871) and programmed by Ada Lovelace (1815-1852), was conceived for the specific purpose of generating printed tables of functions. 


## Multi-input functions as tables (optional)

In @sec-functions-as-data we painted a picture of a function as a chain of offices. Each office has a stack of paper, all identically printed with the same number on each. Evaluating a function at an input is accomplished by finding the office corresponding to that input and collecting one of the sheets from the office's stack of pre-printed paper.

In the sort of function just described, all the offices were along a single corridor. Such functions are said to have ***one input***, or, equivalently, to be "functions of one variable." To operate the function, you just need one number: the address of the office from which you will collect the output.

Many functions have more than one input: two, three, four, ... tens, hundreds, thousands, millions, .... In this course, we will work mainly with functions of two inputs, but the skills you develop will be applicable to functions of more than two inputs.

What does a function of two inputs look like in our office analogy? Imagine that the office building has many parallel corridors, each with a numeric ID. To evaluate the function, you need two numeric inputs: the number of the corridor and the number of the door along that corridor. With those two numbers in hand, you locate the appropriate door, knock on it and receive the output number in return. 

Three inputs? Think of a building with many floors. Each floor has a numerical ID so that you can go to the right floor guided by the first input to the function. Once on the right floor, use the second and third input to go to the right corridor and the right door on that corridor. Taken together, the three inputs identify a particular office: floor, corridor, and door.

Four inputs? A street with many three-input functions along it. Five inputs? A city with many parallel four-input streets. And on and on.

Interpolation for a function of multiple inputs is a somewhat tedious process, involving visiting several offices: the neighbors along a corridor, the neighboring corridor, the next floor up, the neighboring building along the street, and the building on the next parallel street. 

