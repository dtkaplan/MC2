<!--

The functions we've studied have had one or more inputs, but only a **single quantity** as output. For many uses, such as to record the trajectory of an object moving through space, we need to coordinate multiple functions, for instance the $x(t), y(t)$, and $z(t)$ coordinates of the moving object. For velocity there are three corresponding functions: $\partial_t x(t)$, $\partial_t y(t)$, and $\partial_t z(t)$. If we use function graphs to display velocity functions, we end up having three different graphics frames: $\partial_t x$ versus $t$ as well as $\partial_t y$ versus $t$ and also $\partial_t z$ versus $t$. Spreading out the information about the object's velocity among three graphics frames makes it hard to see the relationship among those quantities. 

To streamline thinking about velocity and other things that consist of multiple functions, it is useful to introduce a new concept: ***vectors***. 

For now, we will define a vector as a simple set of coordinates such as position on a plane $(x, y)$ or position in the three-dimensional world $(x, y, z)$. Allowing the output of a function to be ***vector valued*** is very much a book-keeping convention. Rather than using separate $x(t)$ and $y(t)$ functions to represent position, we can use just a single function, say $\text{pos}(t)$, that translates the input $t$ into an output with $(x, y)$ components. One small advantage of this is that functions names can be more meaningful and relationships more concise, for instance $\text{vel}(t) \equiv \partial_t \text{pos}(t)$ or $\text{accel}(t) \equiv \partial_{tt} \text{pos}(t)$. There is no magic in applying operations like $\partial_t$ or $\partial_{tt}$ to vector-valued functions; just apply the operations separately to each component of the vector output.

Vectors will be particularly useful for visualization, both graphical and mental. The graphical convention for presenting vectors is a simple arrow whose direction and length are immediately evident. This contrasts the the usual presentation of a $(x, y)$-coordinate as a point in space. The coordinate-point and vector-arrow conventions (@fig-two-presentations) are both useful, but for different purposes.

```{r echo=FALSE}
#| label: fig-two-presentations
#| fig-cap: "The vector-arrow and coordinate-point presentation of $(3,2)$ (blue) and $(-1, 1.5)$."
Pts <- tibble::tibble(
  x = c(3, -1),
  y = c(2, 1.5),
  x0 = c(-1, 4),
  y0 = c(1, 0), 
  xend = x + x0,
  yend = y + y0,
  color = c("black", "blue")
)

P1 <- gf_segment(y0 + yend ~ x0 + xend, data = Pts, color=~color, arrow=arrow(), size=2) %>%
  gf_refine(coord_fixed(), scale_color_identity()) %>%
  gf_theme(theme(panel.background = element_blank(),
                 axis.ticks = element_blank(),
                 axis.title = element_blank(),
                 axis.text  = element_blank())) %>%
  gf_labs(title="Vector presentation")

P2 <- gf_point(y ~ x, data = Pts, color=~color, size=2) %>%
  gf_refine(coord_fixed(), scale_color_identity(),
            scale_y_continuous(limits=c(-1,3), breaks=(-1):3)) %>%
  gf_vline(xintercept = ~ 0) %>%
  gf_hline(yintercept = ~ 0) %>%
  gf_theme(theme(panel.background = element_blank())) %>%
  gf_labs(title="Coordinate presentation")
gridExtra::grid.arrange(P1, P2, ncol=2)
```

One setting where a vector representation is useful is velocity. In @sec-splines there is an example involving a robot arm moving in an $(x, y)$-plane. At each instant, the arm has both a $(x, y)$-position and an $(x, y)$-velocity. @fig-robot-xy shows the separate components of position ($x(t)$ and $y(t)$) and velocity ($\partial_t x(t)$ and $\partial_t y(t)$) and acceleration ($\partial_{tt} x(t)$ and $\partial_{tt} y(t)$)  in six graphic frames. \@ref(fig:velocity-vs-position) 

```{r results="hide"}
pos_x <- spliner(x ~ t, data = Robot_stations)
pos_y <- spliner(y ~ t, data = Robot_stations)
vel_x <- D(pos_x(t) ~ t)
vel_y <- D(pos_y(t) ~ t)
accel_x <- D(pos_x(t) ~ t & t)
accel_y <- D(pos_y(t) ~ t & t)
```

```{r echo=FALSE}
#| label: fig-robot-xy
#| fig-cap: "The position, velocity, and acceleration of the robot arm as a function of time. The x-coordinate is the left column, the y-coordinate the right column."
P1 <- slice_plot(pos_x(t) ~ t, bounds(t=1:15)) %>%
  gf_labs(y = "x position")
P2 <- slice_plot(pos_y(t) ~ t, bounds(t=1:15)) %>%
  gf_labs(y = "y position")
P3 <- slice_plot(vel_x(t) ~ t, bounds(t=1:15), color="blue") %>%
  gf_labs(y = "x velocity")
P4 <- slice_plot(vel_y(t) ~ t, bounds(t=1:15), color="blue") %>%
  gf_labs(y = "y velocity")
P5 <- slice_plot(accel_x(t) ~ t, bounds(t=1:15), color="magenta") %>%
  gf_labs(y = "x acceleration")
P6 <- slice_plot(accel_y(t) ~ t, bounds(t=1:15), color="magenta") %>%
  gf_labs(y = "y acceleration")
                   
gridExtra::grid.arrange(P1, P2, P3, P4, P5, P6, ncol=2 )
```

It is hard to form an image of the motion from these graphs. Better to show the $x-$ and $y-$ components of position in a single frame, as in @fig-velocity-vs-position

```{r echo=FALSE}
#| label: fig-velocity-vs-position
#| fig-cap: "The three coordinate properties of the robot arm motion: position (thin black curve), velocity (blue vector) and acceleration (magenta vector)."
Traj <- tibble::tibble(t=seq(1,15,length = 500),
               x=pos_x(t),
               y=pos_y(t))
Vecs <- tibble::tibble(t=seq(1,15,length = 46),
               x=pos_x(t),
               y=pos_y(t),
               vx = vel_x(t)/5 + x,
               vy = vel_y(t)/5 + y,
               ax = accel_x(t)/15 + vx,
               ay = accel_y(t)/15 + vy)
gf_path(y ~ x, data = Traj, size=.3, alpha=1) %>%
  gf_segment(y + vy ~ x + vx, data = Vecs, color="blue",size=1,
             arrow=arrow(type = "closed", length=unit(.1, "cm"))) %>%
  gf_segment(vy + ay ~ vx + ax, data = Vecs, color="magenta", size=0.6,
             arrow=arrow(type = "closed", length=unit(.1, "cm")))
  
```

@fig-velocity-vs-position consolidates into one graphical frame the relationships spread out over six frames in @fig-robot-xy. The consolidated graph makes it easy to see what the path is, as well as how speed varies along the path and the direction of instantaneous velocity relates to movement along the path. You can also see the relationship between velocity and acceleration; where straight-line motion is slowing down, acceleration points opposite velocity, where speed is increasing, acceleration points in the same direction as velocity. And where the motion is changing direction, acceleration is not aligned with velocity but points toward the curving path.

In Chapter @gradient we worked with function having multiple inputs but a single output---not a vector. But differentiation of multiple-input functions involves ***partial derivatives***: there is one partial derivative for **each of the inputs**. In other words, the output of differentiation of a function of multiple inputs is a vector. For a function $f(x,y)$, the vector is $\left({\large\strut}\partial_x f(x, y),\ \ \partial_y f(x, y)\right)$. This is called the ***gradient vector***, as described in @sec-gradient.

To display a function with gradient vectors, calculate the gradient at many different points in the domain. This collection of vectors illustrates a ***vector field***, that is, a vector-valued function of continuous inputs.

The gradient vector is particularly useful when searching for argmaxes or argmins of functions with multiple inputs. (See @sec-optimization-and-constraint.) As an example, consider the function of two inputs shown as a gradient field in @fig-grad-preview1. For your convenience, we've labelled the local argmin and argmaxes with a dot. Note that the vectors point toward the argmaxes and away from the argmin. 

```{r echo=FALSE}
f <- doodle_fun(~ x & y, seed = 452)
one <- argM(f(x, y) ~ x & y, bounds(x=-1:0, y=-0:2))
two <- argM(-f(x, y) ~ x & y, bounds(x=-4:-3, y=-4:-2)) %>%
  mutate(.output. = - .output., color="brown")
three <- argM(-f(x, y) ~ x & y, bounds(x=2:4, y=2:4)) %>%
  mutate(.output. = - .output., color="magenta")
Where <- bind_rows(one, two, three)
```


```{r echo=FALSE, width=8, height=8, out.width="130%"} 
#| label: fig-grad-preview1 
#| fig-cap: "The gradient field for a function. The gradient vector points the way uphill." 
gradient_plot(f(x, y) ~ x & y, bounds(x=-4:4, y=-4:4), npts=30) %>%
  gf_point(y ~ x, data = Where, size=3, alpha=.3,
           inherit=FALSE) %>%
  gf_refine(coord_fixed())
```
The gradient vector provides a straightforward and intuitive way to locate argmaxes and argmins. Start at some point in the domain of interest. Follow the direction of the gradient vector to find an argmax. For an argmin, walk always against the gradient vector.

The gradient vector carries much the same information as do the contours locally. @fig-contour-and-gradient plots the gradient field of the function on top of the contours. At each point in the domain, the gradient vector is perpendicular to the contour through that point. 

```{r echo=FALSE, width=12, height=12, out.width="180%"}
#| label: fig-contour-and-gradient
#| fig-cap: "Gradient fields carry much the same information as a set of contours. Note that the gradient vector at each point is perpendicular to the contour through that point." 
contour_plot(f(x, y) ~ x & y, bounds(x=-4:4, y=-4:4), filled=FALSE) %>%
  gradient_plot(f(x, y) ~ x & y, bounds(x=-4:4, y=-4:4), npts=30) %>%
  gf_point(y ~ x, data = Where, fill = ~ color, size=3, alpha=.3) %>%
  gf_refine(coord_fixed())
```

While the contours carry information about the output value of the function, the gradient field shows **how steep** the function is at any point.

-->